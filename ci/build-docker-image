!/usr/bin/env bash

#set -e
#set -x
#
## This script runs the maven build, including unit tests, assembles a fat jar with
## embedded web server, and packages the resulting thing in a Docker image that runs
## the server on startup. The image is tagged with the string passed in as the first argument.
#
## This script is invoked during CI build with the following arguments:
#target_image_name=$1
#app_name=$2
#app_version=$3
#
#./mvnw versions:set -DnewVersion=${app_version}
#./mvnw clean package
#./mvnw versions:revert
#
## This script does all its staging in a directory called target for easy cleanup and effective .gitignore.
#mkdir -p ci/impl/target
#
#cp target/*.jar ci/impl/target/app.jar
#cd ci/impl
#docker build -t ${target_image_name} .
#


#!/usr/bin/env bash

set -e
set -x

# This script runs the maven build, including unit tests, assembles a fat jar with
# embedded web server, and packages the resulting thing in a Docker image that runs
# the server on startup. The image is tagged with the string passed in as the first argument.

# This script is invoked during CI build with the following arguments:
target_image_name=$1
app_name=$2
app_version=$3

# This script does all its staging in a directory called target for easy cleanup and effective .gitignore.
docker_context_dir=ci/impl/target
rm -rf ${docker_context_dir}
mkdir -p ${docker_context_dir}
cp -rp src .mvn mvnw pom.xml ${docker_context_dir}

docker build \
  --build-arg APP_NAME=${app_name} \
  --build-arg APP_VERSION=${app_version} \
  -t ${target_image_name} \
  ci/impl
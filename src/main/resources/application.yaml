app:
  #  cromwell:
  #    url: "localhols"
  #    username: "dnastack"
  #    password: "dnstck2016"
  service-info:
    auth-instruction-url: "https://wep-keycloak.staging.dnastack.com/auth/realms/DNAstack/.well-known/openid-configuration"
    supported-wes-versions:
    - "1.0.0"

    supported-file-system-protocols:
    - "gs"
    - "http"
    - "file"
    - "drs"
    workflow-engine-versions:
      cromwell: 42
    workflow-type-versions:
      WDL:
      - "draft-2"
      - "1.0"
  drs:
    supported-types:
    - "file"
  transfer:
    enabled: true
    staging-directory: "gs://ds-test-uploading"
    object-transfer-uri: "https://object-transfer.staging.dnastack.com"
    external-account-uri: "https://external-accounts.staging.dnastack.com"
  auth:
    identity-provider: "keycloak"
    base-url:  "https://wep-keycloak.staging.dnastack.com/auth"
    client-id: "${app.auth.service-account-client-id}"
    oidc-token-uri: "https://wep-keycloak.staging.dnastack.com/auth/realms/DNAstack/protocol/openid-connect/token"
    service-account-client-id: "wes-service"
    service-account-secret: "e5c145eb-2f2e-4d3e-949c-c5a9f247fd01"
  restrict-user-access-to-own-runs: true

# App information
info:
  app:
    name: "wes-service"
    description: "Interface Layering WES API ontop of an execution engine"
    version: "${project.version}"

server:
  port: 8090

spring:
  security.oauth2.resourceserver.jwt.issuer-uri: ${app.auth.base-url}/realms/DNAstack
  servlet:
    multipart:
      enabled: true
  jackson:
    default-property-inclusion: non_null
    deserialization:
      FAIL_ON_UNKNOWN_PROPERTIES: false

  datasource:
    driver-class-name: org.postgresql.Driver
    username: wes-service
    password: ""
    url: jdbc:postgresql://localhost/wes-service
  jpa:
    properties:
      hibernate:
        jdbc:
          lob:
            # Fix for cosmetic error on startup `HHH000424: Disabling contextual LOB creation as createClob() method threw error`
            non_contextual_creation: true
    database-platform: org.hibernate.dialect.PostgreSQL95Dialect
security.oauth2.client:
  client-id: ${app.auth.service-account-client-id}
  client-secret: ${app.auth.service-account-secret}
  user-authorization-uri: "${app.auth.base-url}/realms/DNAstack/protocol/openid-connect/auth"
  access-token-uri: ${app.auth.base-url}/realms/DNAstack/protocol/openid-connect/token
  scope: openid
  grant-type: client_credentials

